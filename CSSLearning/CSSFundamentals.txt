# The method attribute specifies how to send form-data to the URL specified in the action attribute. The form-data can be sent via a GET request as URL parameters (with method="get") or via a POST request as data in the request body (with method="post").

# The rem unit stands for root em, and is relative to the font size of the html element.
As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.

#The first input element with a type of submit is automatically set to submit its nearest parent form element.
To handle the form submission, after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit.

# Certain type attribute values come with built-in form validation. For example, type="email" requires that the value be a valid email address.
Add custom validation to the password input element, by adding a minlength attribute with a value of 8. Doing so prevents inputs of less than 8 characters being submitted.

# With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.
Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}
The above is a regular expression which matches eight or more lowercase letters or the digits 0 to 5. 

# input tag is very important**
  the input type 'file' allows to take file (txt, pdf, images) as input.

# Adding a dropdown to the form is easy with the select element. The select element is a container for a group of option elements, and the option element acts as a label for each dropdown option. Both elements require closing tags.

# Submitting the form with an option selected would not send a useful value to the server. As such, each option needs to be given a value attribute. Without which, the text content of the option will be submitted to the server.(mtlb text jo hai option vo ni jayega bss value vo jayegi particular to option)

# The textarea element acts like an input element of type text, but comes with the added benefit of being able to receive multi-line text, and an initial number of text rows and columns.(with inpu type "txt" single line input can be taken only). To give it an initial size, you can add the rows and cols attributes.


# an element's length is relative to its parent element's length.


-----------------------------------##################--------------------


# A really important thing to remember when writing CSS, or working on the web as a whole, is that everything displayed by CSS is a box. Whether that's a box that uses border-radius to look like a circle, or even just some text: the key thing to remember is that it's all boxes.

IT'S ALL BOXES.

# When content is too big for the box it is in, we call this overflow. You can manage how an element handles overflow content, using the overflow property.
# Content box-> Padding Box-> Border box-> margin box.
# Content box: content can control the size of its parent, so is usually the most variably sized area
# The padding box surrounds the content box and is the space created by the padding property. Because padding is inside the box, the background of the box will be visible in the space that it creates
# The border box surrounds the padding box and its space is occupied by the border value. The border box is the bounds of your box and the border edge is the limit of what you can visually see.
#  the margin box, is the space around your box, defined by the margin rule on your box. Properties such as outline and box-shadow occupy this space too because they are painted on top, so they don't affect the size of our box. You could have an outline-width of 200px on our box and everything inside and including the border box would be exactly the same size.






